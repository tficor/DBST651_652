--CREATE TABLE FOR ADDRESS
CREATE TABLE ADDRESS(POSTAL_CODE VARCHAR2(12), CITY VARCHAR2(50), 
STATE VARCHAR2(26), REGION VARCHAR2(26), COUNTRY VARCHAR2(50), 
STREET_ADDRESS_1 VARCHAR2(256), STREET_ADDRESS_2 VARCHAR2(256));

--CREATE TABLE FOR CUSTOMERS
CREATE TABLE CUSTOMERS(CUSTOMER_ID VARCHAR2(8), CUST_FIRST_NAME VARCHAR2(50), 
CUST_LAST_NAME VARCHAR2(26), SEGMENT VARCHAR2(26));


--CREATE TABLE FOR PRODUCTS
CREATE TABLE PRODUCTS(PRODUCT_ID VARCHAR2(15), CATEGORY VARCHAR2(26), 
SUB_CATEGORY VARCHAR2(26), PRODUCT_NAME VARCHAR2(256));

--CREATE TABLE FOR ORDERS
CREATE TABLE ORDERS(ORDER_ID VARCHAR2(14), ORDER_DATE VARCHAR2(10), 
SHIP_DATE VARCHAR2(10), SHIP_MODE VARCHAR2(50),CUSTOMER_ID VARCHAR2(8), 
STREET_ADDRESS_1 VARCHAR2(50), STREET_ADDRESS_2 VARCHAR2(50), 
CITY VARCHAR2(50), POSTAL_CODE VARCHAR2(12));

--CREATE TABLE FOR LINE_ITEMS
CREATE TABLE LINE_ITEMS(ORDER_ID VARCHAR2(14), PRODUCT_ID VARCHAR2(15), 
PRODUCT_NAME VARCHAR2(256), QUANTITY NUMBER(12), 
LINE_ITEM_SALE_PRICE NUMBER(12,2));


--This query will populate the ADDRESS table with distinct
--postal code and city combinations from the SUPERSTORE table.
INSERT INTO ADDRESS(POSTAL_CODE, CITY, STATE, REGION, COUNTRY)
SELECT DISTINCT POSTAL_CODE, CITY, STATE, REGION, COUNTRY
FROM SUPERSTORE
ORDER BY POSTAL_CODE;

--This query will populate the CUSTOMERS table with distinct
--customer information from the SUPERSTORE table.
INSERT INTO CUSTOMERS(CUSTOMER_ID, CUST_FIRST_NAME, CUST_LAST_NAME, SEGMENT)
SELECT DISTINCT CUSTOMER_ID,
       NVL(SUBSTR(CUSTOMER_NAME, 0, INSTR(CUSTOMER_NAME, ' ')-1), CUSTOMER_NAME) AS FN,
       NVL(SUBSTR(CUSTOMER_NAME, INSTR(CUSTOMER_NAME, ' ')+1, LENGTH(CUSTOMER_NAME)), CUSTOMER_NAME) AS LN,
       SEGMENT
FROM SUPERSTORE
ORDER BY CUSTOMER_ID;

--This query will populate the PRODUCTS table with distinct
--product and category information from the SUPERSTORE table.
INSERT INTO PRODUCTS(PRODUCT_ID, CATEGORY, SUB_CATEGORY, PRODUCT_NAME)
SELECT DISTINCT PRODUCT_ID, CATEGORY, SUB_CATEGORY, PRODUCT_NAME
FROM SUPERSTORE
ORDER BY PRODUCT_ID;

--This query will populate the ORDERS table with distinct
--product and order information from the SUPERSTORE table.
INSERT INTO ORDERS(ORDER_ID, ORDER_DATE, SHIP_DATE, CUSTOMER_ID, STREET_ADDRESS_1, CITY, POSTAL_CODE)
SELECT DISTINCT ORDER_ID, ORDER_DATE, SHIP_DATE, CUSTOMER_ID, 'Missing Data', CITY, POSTAL_CODE
FROM SUPERSTORE
ORDER BY ORDER_ID;

--This query will populate the LINE_ITEMS table with distinct
--product and order information from the SUPERSTORE table.
INSERT INTO LINE_ITEMS(ORDER_ID, PRODUCT_ID, PRODUCT_NAME, QUANTITY, LINE_ITEM_SALE_PRICE)
SELECT ORDER_ID, PRODUCT_ID, PRODUCT_NAME, SUM(QUANTITY), SUM(LINE_ITEM_SALE_PRICE)
FROM SUPERSTORE
GROUP BY ORDER_ID, PRODUCT_ID, PRODUCT_NAME;

-- FINDING DUPLICATES AND CLEANING DATA
SELECT * FROM SUPERSTORE WHERE ( ORDER_ID, PRODUCT_ID, ORDER_DATE) IN (SELECT
ORDER_ID, PRODUCT_ID, ORDER_DATE FROM SUPERSTORE
GROUP BY ORDER_ID, PRODUCT_ID, ORDER_DATE 
HAVING COUNT(*)> 1);

--QUERY 1 (739493 should be 741417.91 OFF BY 1924.91)
SELECT S.CATEGORY, ROUND(SUM(LINE_ITEM_SALE_PRICE)) FROM SUPERSTORE S
WHERE CATEGORY = 'Furniture' GROUP BY S.CATEGORY;

--QUERY 2 (Also, off given the screen shots)
SELECT S.CATEGORY, ROUND(SUM(LINE_ITEM_SALE_PRICE)) FROM SUPERSTORE S
GROUP BY S.CATEGORY;

--QUERY 3 (2288278)
SELECT S.CATEGORY, ROUND(SUM(LINE_ITEM_SALE_PRICE)) FROM SUPERSTORE S
GROUP BY ROLLUP(S.CATEGORY);

--QUERY 4 (2288278)
SELECT S.CATEGORY, S.SUB_CATEGORY, ROUND(SUM(LINE_ITEM_SALE_PRICE)) FROM SUPERSTORE S
GROUP BY ROLLUP(S.CATEGORY, S.SUB_CATEGORY);

--QUERY 5 (2289969)
SELECT S.CUSTOMER_ID, S.CATEGORY, S.SUB_CATEGORY, ROUND(SUM(LINE_ITEM_SALE_PRICE)) 
AS "TOTAL_SALES" FROM SUPERSTORE S 
GROUP BY ROLLUP(S.CUSTOMER_ID, S.CATEGORY, S.SUB_CATEGORY)
ORDER BY CUSTOMER_ID ASC, S.CATEGORY;

--QUERY 6 


-------
SELECT * FROM ORDERS WHERE ( ORDER_ID, ORDER_DATE, SHIP_DATE, CUSTOMER_ID, CITY, POSTAL_CODE, SHIP_MODE) IN (SELECT
ORDER_ID, ORDER_DATE, SHIP_DATE, CUSTOMER_ID, CITY, POSTAL_CODE, SHIP_MODE FROM ORDERS
GROUP BY ORDER_ID, ORDER_DATE, SHIP_DATE, CUSTOMER_ID, CITY, POSTAL_CODE, SHIP_MODE
HAVING COUNT(*)> 1);